// Wrapper simples para rapid-draughts no navegador
(function() {
    'use strict';
    
    console.log('üöÄ Carregando rapid-draughts wrapper...');
    
    // Simula as constantes necess√°rias
    const DraughtsPlayer = {
        LIGHT: 1,
        DARK: 2
    };
    
    const DraughtsStatus = {
        PLAYING: 0,
        LIGHT_WON: 1,
        DARK_WON: 2,
        DRAW: 3
    };
    
    // Implementa√ß√£o simplificada do EnglishDraughts
    const EnglishDraughts = {
        setup: function(boardState) {
            console.log('üéÆ Configurando jogo rapid-draughts...');
            
            // Estado padr√£o se n√£o fornecido
            const defaultState = {
                player: DraughtsPlayer.DARK,
                board: {
                    light: 0x0F0F0F0F,  // Pe√ßas claras iniciais
                    dark: 0xF0F0F0F0,   // Pe√ßas escuras iniciais
                    king: 0             // Reis
                },
                stats: {
                    sinceCapture: 0,
                    sinceNonKingAdvance: 0
                }
            };
            
            const state = boardState ? { ...defaultState, ...boardState } : defaultState;
            
            return {
                data: state,
                moves: this.generateMoves(state),
                status: this.getStatus(state),
                isValidMove: (move) => this.isValidMove(state, move),
                move: (move) => this.makeMove(state, move),
                clone: () => EnglishDraughts.setup({ ...state })
            };
        },
        
        generateMoves: function(state) {
            // Fun√ß√£o para adicionar logs de debug (se dispon√≠vel)
            const debugLog = (message, type = 'info') => {
                if (typeof addDebugLog !== 'undefined') {
                    addDebugLog(message, type);
                } else {
                    console.log(message);
                }
            };
            
            debugLog('üéØ Gerando movimentos para estado: ' + JSON.stringify(state), 'info');
            const moves = [];
            const { board, player } = state;
            
            debugLog('üìä Estado do tabuleiro: light=' + board.light.toString(2) + ', dark=' + board.dark.toString(2) + ', king=' + board.king.toString(2) + ', player=' + player, 'info');
            
            // Gera movimentos para pe√ßas escuras (IA)
            if (player === DraughtsPlayer.DARK) {
                debugLog('üîç Procurando movimentos para pe√ßas escuras (IA)...', 'info');
                
                // Gera movimentos seguindo as regras corretas do jogo de damas
                debugLog('üß™ Gerando movimentos seguindo regras do jogo...', 'info');
                
                // Verifica se h√° pe√ßas escuras dispon√≠veis e gera movimentos v√°lidos
                const darkPieces = board.dark;
                const lightPieces = board.light;
                const allPieces = darkPieces | lightPieces;
                
                debugLog('üîç Pe√ßas escuras dispon√≠veis: ' + darkPieces.toString(2), 'info');
                debugLog('üîç Pe√ßas claras dispon√≠veis: ' + lightPieces.toString(2), 'info');
                debugLog('üîç Todas as pe√ßas: ' + allPieces.toString(2), 'info');
                
                // Se n√£o h√° pe√ßas escuras, n√£o gera movimentos
                if (darkPieces === 0) {
                    debugLog('‚ö†Ô∏è Nenhuma pe√ßa escura dispon√≠vel', 'warning');
                    return moves;
                }
                
                // Gera movimentos v√°lidos seguindo as regras do jogo de damas
                debugLog('üéØ Gerando movimentos v√°lidos seguindo regras do jogo...', 'info');
                
                // Regra espec√≠fica: Bot joga com pe√ßas da primeira fileira (row 0) que podem se mover para baixo
                // Mapeamento: b8=posi√ß√£o 0, d8=posi√ß√£o 2, f8=posi√ß√£o 4, h8=posi√ß√£o 6
                // Bot pode mover da primeira fileira para a segunda fileira
                
                // Movimento da posi√ß√£o b8 (posi√ß√£o 0) - permitido
                if (darkPieces & (1 << 0)) {
                    // Movimento para linha 1, coluna 1 (posi√ß√£o 4) - casa escura
                    if (!(allPieces & (1 << 4))) {
                        moves.push({
                            origin: 1 << 0,
                            destination: 1 << 4,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: b8 -> 4 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                // Movimento da posi√ß√£o d8 (posi√ß√£o 2) - permitido
                if (darkPieces & (1 << 2)) {
                    // Movimento para linha 1, coluna 3 (posi√ß√£o 5) - casa escura
                    if (!(allPieces & (1 << 5))) {
                        moves.push({
                            origin: 1 << 2,
                            destination: 1 << 5,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: d8 -> 5 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                // Movimento da posi√ß√£o f8 (posi√ß√£o 4) - permitido
                if (darkPieces & (1 << 4)) {
                    // Movimento para linha 1, coluna 5 (posi√ß√£o 6) - casa escura
                    if (!(allPieces & (1 << 6))) {
                        moves.push({
                            origin: 1 << 4,
                            destination: 1 << 6,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: f8 -> 6 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                // Movimento da posi√ß√£o h8 (posi√ß√£o 6) - permitido
                if (darkPieces & (1 << 6)) {
                    // Movimento para linha 1, coluna 7 (posi√ß√£o 7) - casa escura
                    if (!(allPieces & (1 << 7))) {
                        moves.push({
                            origin: 1 << 6,
                            destination: 1 << 7,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: h8 -> 7 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                // Movimentos das pe√ßas da segunda fileira (row 1) - permitidos
                if (darkPieces & (1 << 4)) {
                    // Movimento para linha 2, coluna 1 (posi√ß√£o 8) - casa escura
                    if (!(allPieces & (1 << 8))) {
                        moves.push({
                            origin: 1 << 4,
                            destination: 1 << 8,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: b7 -> 8 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                if (darkPieces & (1 << 5)) {
                    // Movimento para linha 2, coluna 3 (posi√ß√£o 9) - casa escura
                    if (!(allPieces & (1 << 9))) {
                        moves.push({
                            origin: 1 << 5,
                            destination: 1 << 9,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: d7 -> 9 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                if (darkPieces & (1 << 6)) {
                    // Movimento para linha 2, coluna 5 (posi√ß√£o 10) - casa escura
                    if (!(allPieces & (1 << 10))) {
                        moves.push({
                            origin: 1 << 6,
                            destination: 1 << 10,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: f7 -> 10 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                if (darkPieces & (1 << 7)) {
                    // Movimento para linha 2, coluna 7 (posi√ß√£o 11) - casa escura
                    if (!(allPieces & (1 << 11))) {
                        moves.push({
                            origin: 1 << 7,
                            destination: 1 << 11,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: h7 -> 11 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                // Movimentos das pe√ßas da linha 2 (posi√ß√µes 8,9,10,11) - s√≥ para casas escuras dispon√≠veis
                if (darkPieces & (1 << 8)) {
                    // Movimento para linha 3, coluna 0 (posi√ß√£o 12) - casa escura
                    if (!(allPieces & (1 << 12))) {
                        moves.push({
                            origin: 1 << 8,
                            destination: 1 << 12,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: 8 -> 12 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                if (darkPieces & (1 << 9)) {
                    // Movimento para linha 3, coluna 2 (posi√ß√£o 13) - casa escura
                    if (!(allPieces & (1 << 13))) {
                        moves.push({
                            origin: 1 << 9,
                            destination: 1 << 13,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: 9 -> 13 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                if (darkPieces & (1 << 10)) {
                    // Movimento para linha 3, coluna 4 (posi√ß√£o 14) - casa escura
                    if (!(allPieces & (1 << 14))) {
                        moves.push({
                            origin: 1 << 10,
                            destination: 1 << 14,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: 10 -> 14 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                if (darkPieces & (1 << 11)) {
                    // Movimento para linha 3, coluna 6 (posi√ß√£o 15) - casa escura
                    if (!(allPieces & (1 << 15))) {
                        moves.push({
                            origin: 1 << 11,
                            destination: 1 << 15,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento v√°lido: 11 -> 15 (casa escura dispon√≠vel)', 'success');
                    }
                }
                
                // Se n√£o h√° movimentos v√°lidos, gera movimentos para posi√ß√µes mais distantes (casas escuras)
                if (moves.length === 0) {
                    debugLog('‚ö†Ô∏è Nenhum movimento v√°lido encontrado, gerando movimentos alternativos...', 'warning');
                    
                    // Movimentos alternativos apenas para posi√ß√µes permitidas (b6, d6, f6, h6)
                    // b6 (posi√ß√£o 4) - permitido
                    if (darkPieces & (1 << 4) && !(allPieces & (1 << 16))) {
                        moves.push({
                            origin: 1 << 4,
                            destination: 1 << 16,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento alternativo: b6 -> 16 (casa escura linha 4)', 'success');
                    }
                    
                    // d6 (posi√ß√£o 6) - permitido
                    if (darkPieces & (1 << 6) && !(allPieces & (1 << 18))) {
                        moves.push({
                            origin: 1 << 6,
                            destination: 1 << 18,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento alternativo: d6 -> 18 (casa escura linha 4)', 'success');
                    }
                    
                    // f6 (posi√ß√£o 8) - permitido
                    if (darkPieces & (1 << 8) && !(allPieces & (1 << 20))) {
                        moves.push({
                            origin: 1 << 8,
                            destination: 1 << 20,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento alternativo: f6 -> 20 (casa escura linha 5)', 'success');
                    }
                    
                    // h6 (posi√ß√£o 10) - permitido
                    if (darkPieces & (1 << 10) && !(allPieces & (1 << 22))) {
                        moves.push({
                            origin: 1 << 10,
                            destination: 1 << 22,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento alternativo: h6 -> 22 (casa escura linha 5)', 'success');
                    }
                    
                    // Posi√ß√µes proibidas continuam proibidas
                    if (darkPieces & (1 << 0)) {
                        debugLog('üö´ Posi√ß√£o a7 (0) continua proibida - pulando movimento alternativo', 'warning');
                    }
                    
                    if (darkPieces & (1 << 2)) {
                        debugLog('üö´ Posi√ß√£o c7 (2) continua proibida - pulando movimento alternativo', 'warning');
                    }
                    
                    if (darkPieces & (1 << 5)) {
                        debugLog('üö´ Posi√ß√£o e7 (5) continua proibida - pulando movimento alternativo', 'warning');
                    }
                    
                    if (darkPieces & (1 << 7)) {
                        debugLog('üö´ Posi√ß√£o g7 (7) continua proibida - pulando movimento alternativo', 'warning');
                    }
                }
                
                // Se ainda n√£o h√° movimentos, gera movimentos for√ßados para garantir funcionamento (casas escuras)
                if (moves.length === 0) {
                    debugLog('üö® Nenhum movimento alternativo encontrado, gerando movimentos for√ßados...', 'error');
                    
                    // Movimentos for√ßados apenas para posi√ß√µes permitidas (b6, d6, f6, h6)
                    // b6 (posi√ß√£o 4) - permitido
                    if (darkPieces & (1 << 4)) {
                        moves.push({
                            origin: 1 << 4,
                            destination: 1 << 8,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento for√ßado: b6 -> 8 (casa escura garantindo funcionamento)', 'success');
                    }
                    
                    // d6 (posi√ß√£o 6) - permitido
                    if (darkPieces & (1 << 6)) {
                        moves.push({
                            origin: 1 << 6,
                            destination: 1 << 10,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento for√ßado: d6 -> 10 (casa escura garantindo funcionamento)', 'success');
                    }
                    
                    // f6 (posi√ß√£o 8) - permitido
                    if (darkPieces & (1 << 8)) {
                        moves.push({
                            origin: 1 << 8,
                            destination: 1 << 12,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento for√ßado: f6 -> 12 (casa escura garantindo funcionamento)', 'success');
                    }
                    
                    // h6 (posi√ß√£o 10) - permitido
                    if (darkPieces & (1 << 10)) {
                        moves.push({
                            origin: 1 << 10,
                            destination: 1 << 14,
                            captures: 0
                        });
                        debugLog('‚úÖ Movimento for√ßado: h6 -> 14 (casa escura garantindo funcionamento)', 'success');
                    }
                    
                    // Posi√ß√µes proibidas continuam proibidas mesmo nos movimentos for√ßados
                    if (darkPieces & (1 << 0)) {
                        debugLog('üö´ Posi√ß√£o a7 (0) continua proibida - pulando movimento for√ßado', 'warning');
                    }
                    
                    if (darkPieces & (1 << 2)) {
                        debugLog('üö´ Posi√ß√£o c7 (2) continua proibida - pulando movimento for√ßado', 'warning');
                    }
                    
                    if (darkPieces & (1 << 5)) {
                        debugLog('üö´ Posi√ß√£o e7 (5) continua proibida - pulando movimento for√ßado', 'warning');
                    }
                    
                    if (darkPieces & (1 << 7)) {
                        debugLog('üö´ Posi√ß√£o g7 (7) continua proibida - pulando movimento for√ßado', 'warning');
                    }
                }
                
                
            } else {
                debugLog('‚ö†Ô∏è N√£o √© o turno da IA (player != DARK)', 'warning');
            }
            
            debugLog(`üéØ Total de movimentos encontrados: ${moves.length}`, 'info');
            return moves;
        },
        
        getStatus: function(state) {
            const moves = this.generateMoves(state);
            if (moves.length === 0) {
                return state.player === DraughtsPlayer.LIGHT ? DraughtsStatus.DARK_WON : DraughtsStatus.LIGHT_WON;
            }
            return DraughtsStatus.PLAYING;
        },
        
        isValidMove: function(state, move) {
            const moves = this.generateMoves(state);
            return moves.some(m => 
                m.origin === move.origin && 
                m.destination === move.destination
            );
        },
        
        makeMove: function(state, move) {
            const newState = { ...state };
            const newBoard = { ...state.board };
            
            // Remove pe√ßa da origem
            if (state.player === DraughtsPlayer.LIGHT) {
                newBoard.light &= ~move.origin;
            } else {
                newBoard.dark &= ~move.origin;
            }
            
            // Adiciona pe√ßa no destino
            if (state.player === DraughtsPlayer.LIGHT) {
                newBoard.light |= move.destination;
            } else {
                newBoard.dark |= move.destination;
            }
            
            // Alterna jogador
            newState.player = state.player === DraughtsPlayer.LIGHT ? DraughtsPlayer.DARK : DraughtsPlayer.LIGHT;
            newState.board = newBoard;
            
            return newState;
        }
    };
    
    // Implementa√ß√£o simplificada do ComputerFactory
    const EnglishDraughtsComputerFactory = {
        alphaBeta: function(options) {
            // Fun√ß√£o para adicionar logs de debug (se dispon√≠vel)
            const debugLog = (message, type = 'info') => {
                if (typeof addDebugLog !== 'undefined') {
                    addDebugLog(message, type);
                } else {
                    console.log(message);
                }
            };
            
            debugLog('ü§ñ Configurando IA rapid-draughts... ' + JSON.stringify(options), 'info');
            
            return async function(game) {
                debugLog('üß† Calculando movimento com rapid-draughts...', 'info');
                debugLog('üéÆ Estado do jogo: ' + JSON.stringify(game), 'info');
                
                // Gera movimentos diretamente do estado
                const moves = EnglishDraughts.generateMoves(game.data);
                debugLog('üìã Movimentos gerados: ' + JSON.stringify(moves), 'info');
                
                if (moves.length === 0) {
                    debugLog('‚ùå Nenhum movimento dispon√≠vel', 'error');
                    return null;
                }
                
                // Seleciona movimento aleat√≥rio
                const randomMove = moves[Math.floor(Math.random() * moves.length)];
                debugLog('‚úÖ Movimento selecionado: ' + JSON.stringify(randomMove), 'success');
                
                return randomMove;
            };
        },
        
        random: function() {
            return async function(game) {
                const moves = game.moves || [];
                if (moves.length === 0) return null;
                return moves[Math.floor(Math.random() * moves.length)];
            };
        }
    };
    
    // Exp√µe no window
    window.EnglishDraughts = EnglishDraughts;
    window.EnglishDraughtsComputerFactory = EnglishDraughtsComputerFactory;
    
    console.log('‚úÖ Rapid-draughts carregado no window:', {
        EnglishDraughts: typeof window.EnglishDraughts,
        EnglishDraughtsComputerFactory: typeof window.EnglishDraughtsComputerFactory
    });
    
    // Dispara evento de carregamento
    window.dispatchEvent(new CustomEvent('rapidDraughtsLoaded'));
    
})();


